import { Inject } from '@nestjs/common';
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';

import { Client } from '../../../domain/client.entity';

import { IClientRepository } from '../../../domain/ports/repository.interface';
import { CLIENT_REPOSITORY_TOKEN } from '../../../domain/ports/tokens';

export class CreateClientCommand {
  constructor(
    public readonly firstName: string,
    public readonly lastName: string,
  ) {}
}

@CommandHandler(CreateClientCommand)
export class CreateClientCommandHandler
  implements ICommandHandler<CreateClientCommand>
{
  constructor(
    @Inject(CLIENT_REPOSITORY_TOKEN)
    private clientRepository: IClientRepository,
  ) {}

  async execute({ firstName, lastName }: CreateClientCommand) {
    const entity = new Client({
      id: 0, // The id will be generated by the database
      firstName,
      lastName,
    });

    return this.clientRepository.create(entity);
  }
}
